/*Int fact(Int n){
	Fut<Int> x ; Int m ;
	if (n==0) { 
		return 1 ; 
	} else {
		VM y = new VM();
		x = y!fact(n-1) ;
		m = x.get ;
		return m*n ;
	}
}

{	
	Fut<Int> f = this!fact(10);
	Int x = f.get;
}
*/


//it assumes n > m
//creates one virtual machine for the first
//n-m calls and two for the last m calls
Int foo(Int n, Int m) {
  Fut<Int> f; Fut<Int> g;
  if (n==0) return 0;
  else if( n > m){ 
    VM v1 = new VM();
	f = v1!foo(n-1,m); 
	Int res = f.get;	
	return 0;
  }
  else{
    VM v1 = new VM(); VM v2 = new VM();
	f = v1!foo(n-1,m); Int resf = f.get;
	g = v2!generic(n); Int resg = g.get;
	return 0;
  }
}

//generic fuction with cost 0
//just to give some hypothetical use to V2
Int generic(Int n){
  return 0;
}

//entry point with 2*n, n
{
   Fut<Int> f = this!foo(200, 100);
   Int res = f.get;
   return 0;
}

/*
Int user1(VM x ) {
	VM y ; Fut<Int> f ; Fut<Int> g ; Fut<Int> h ;
	y = new VM();
	f = this!doubleRelease(y, y);
	Int resf = f.get ;
	g = this!doubleRelease(x, y);
	 Int resg = g.get ;  
	return 0 ; 
}
Int doubleRelease(VM x, VM y) {
	release x; release y;
	return 0 ;
}



{
   VM x = new VM();
   Fut<Int> f = this!user1(x);
   Fut<Int> g = this!user1(x);
   
   VM y = new VM();
   Fut<Int> h = x!user1(y);
   Int resh = h.get;
   
   Int resf = f.get;
   Int resf2 = f.get; 
   Int resg = g.get;
   release x;
   
  
   return 0;
}*/